{"version":3,"sources":["template/Menu.jsx","template/PageHeader.jsx","store/actions/countryActions.js","components/Card.jsx","components/SearchForm.jsx","views/pages/Details.jsx","template/Homepage.jsx","template/Content.jsx","App.js","store/reducers/countryReducer.js","store/configureStore.js","index.js"],"names":["Menu","props","className","to","process","PageHeader","title","style","fontSize","subtitle","URL","search","text","sessionStorage","getItem","dispatch","fetch","method","headers","body","JSON","stringify","query","then","res","json","type","payload","data","Country","searchAll","getCountry","name","connect","state","countryName","country","bindActionCreators","onClick","dado","nome","setItem","addLocalStorage","data-testid","url","src","alt","capital","SearchForm","searchTerm","searchUpdated","bind","keyHandler","this","console","log","event","key","setState","filteredCountries","filter","toLowerCase","includes","list","map","dados","push","coordinate","location","role","placeholder","value","onKeyUp","onChange","e","target","load","Fragment","flag","svgFile","area","populacao","population","dominio","topLevelDomains","latitude","longitude","bordersCountry","borders","distanceCountries","distanceToOtherCountries","replaceCharacters","replaceAll","_id","Component","Details","formEditCountry","alterarDados","handleInputChange","checked","nameCountry","alert","nomePais","parse","id","aria-hidden","listCountriesCoordinates","filterCountriesCoordinates","local","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","Marker","position","Popup","width","index","originCountry","line","fontWeight","Math","round","distanceInKm","Polyline","pathOptions","color","positions","Tooltip","sticky","window","href","querySelected","Homepage","rel","Content","exact","path","App","INITIAL_STATE","textInput","countryReducer","action","devTools","__REDUX_DEVTOOLS_EXTENSION__","reducers","combineReducers","store","applyMiddleware","thunk","multi","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f2d2d34.chunk.js","sourcesContent":["import '../css/Menu.css'\nimport React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nconst Menu = props => (\n    <aside className=\"Menu\">\n        <nav>\n            <ul>\n                <li>\n                    <span>Menu <i className=\"fa fa-angle-down\"></i></span>\n                </li>\n                <li>\n                    <Link to={process.env.PUBLIC_URL}>Home</Link>\n                </li>\n                <li>\n                    <Link to={process.env.PUBLIC_URL + \"/dashboard\"}>Lista de países</Link>\n                </li>\n            </ul>\n        </nav>\n    </aside>\n)\n\nexport default Menu","import React from 'react'\n\nconst PageHeader = props => (\n    <header className='page-header'>\n        <h1>{props.title} <small style={{ fontSize: \"50%\" }}>{props.subtitle}</small></h1>\n    </header>\n)\n\nexport default PageHeader","// const URL = 'https://countries-274616.ew.r.appspot.com/'\r\nconst URL = 'http://localhost:8080/'\r\n\r\n// export const changeInput = event => ({\r\n//     type: 'INPUTED',\r\n//     payload: event.target.value\r\n// })\r\n\r\nexport const search = () => { // para pesquisar tudo quando inicializar\r\n\r\n    const text = `( name: \"${sessionStorage.getItem('nome_pais')}\" )`\r\n\r\n    return dispatch => {\r\n        fetch(URL, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query {\r\n                        Country${text} {\r\n                            _id\r\n                            name\r\n                            capital\r\n                            area\r\n                            flag {\r\n                              country {\r\n                                population\r\n                                flag {\r\n                                  svgFile\r\n                                }\r\n                                topLevelDomains {\r\n                                  name\r\n                                }\r\n                              }\r\n                            }\r\n                            location {\r\n                              latitude\r\n                              longitude\r\n                            }\r\n                            borders {\r\n                              name\r\n                              location {\r\n                                latitude\r\n                                longitude\r\n                              }\r\n                            }\r\n                            distanceToOtherCountries(first: 5) {\r\n                              distanceInKm\r\n                              countryName\r\n                            }                            \r\n                        }\r\n                    }\r\n                `\r\n            }),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => dispatch({ type: 'ONE_SEARCHED', payload: res.data.Country }))\r\n    }\r\n}\r\n\r\nexport const searchAll = () => { // para pesquisar tudo quando inicializar\r\n\r\n    return dispatch => {\r\n        fetch(URL, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                query: `\r\n                    query {\r\n                        Country {\r\n                            _id\r\n                            name\r\n                            capital\r\n                            area\r\n                            flag {\r\n                              country {\r\n                                population\r\n                                flag {\r\n                                  svgFile\r\n                                }\r\n                                topLevelDomains {\r\n                                  name\r\n                                }\r\n                              }\r\n                            }\r\n                            location {\r\n                              latitude\r\n                              longitude\r\n                            }\r\n                            borders {\r\n                              name\r\n                              location {\r\n                                latitude\r\n                                longitude\r\n                              }\r\n                            }\r\n                            distanceToOtherCountries(first: 5) {\r\n                              distanceInKm\r\n                              countryName\r\n                            }  \r\n                        }\r\n                    }\r\n                `\r\n            }),\r\n        })\r\n        .then(res => res.json())\r\n        .then(res => dispatch({ type: 'SEARCHED', payload: res.data.Country }))\r\n    }\r\n}\r\n\r\nexport const getCountry = name => { // pegar o nome do país, para usar nos detalhes\r\n    return { type: 'CLICKED', payload: name }\r\n}\r\n","import React from 'react'\nimport '../css/Card.css'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { getCountry } from '../store/actions/countryActions'\n\nconst Card = props => {\n\n    const addLocalStorage = dado => {\n        props.getCountry(dado)\n        const nome = \"name_\" + dado\n        sessionStorage.setItem(nome, dado)\n        sessionStorage.setItem('dados_country_'+nome, JSON.stringify(props))\n        sessionStorage.setItem('nome_pais', dado)\n    }\n    \n    return (\n        <div className=\"Card\" onClick={() => addLocalStorage(props.name)} data-testid=\"card_de_paises\">\n            <Link to={props.url}>\n                <img src={props.src} alt={props.name} />\n                <div className=\"name-country\">\n                    <span><strong>Nome do País:</strong> {props.name}</span>\n                    <span><strong>Capital:</strong> {props.capital}</span>\n                </div>\n            </Link>\n        </div>\n    )\n}\n\nconst mapStateToProps = state => ({ countryName: state.country.countryName }) // \"query\" está vindo da store do arquivo reducers.js\nconst mapDispatchToProps = dispatch => bindActionCreators({ getCountry }, dispatch)\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card)","import React, { Component } from 'react'\r\nimport '../css/SearchForm.css'\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from 'redux'\r\nimport { searchAll } from '../store/actions/countryActions'\r\nimport Card from './Card'\r\nimport '../css/Card.css'\r\nimport replaceCharacters from 'replace-special-characters'\r\nclass SearchForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            searchTerm: ''\r\n        }\r\n        this.searchUpdated = this.searchUpdated.bind(this)\r\n        this.keyHandler = this.keyHandler.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.searchAll()        \r\n        console.log('Inicializando...')\r\n    }\r\n\r\n    keyHandler(event) {\r\n        if (event.key === 'Escape') {\r\n            this.setState({ searchTerm: \"\" })\r\n        }\r\n    }\r\n\r\n    searchUpdated(event) {\r\n        this.setState({ searchTerm: event })        \r\n    }\r\n\r\n    render() {\r\n        // console.log(this.props.query)\r\n        const filteredCountries = this.props.query.filter(country => {\r\n            return country.name.toLowerCase().includes(this.state.searchTerm.toLowerCase()) // pesquisa o país selecionado.\r\n        })\r\n\r\n        let list = [] // recebe um array com novos objetos do nome do país e suas coordenadas\r\n        this.props.query.map(dados => {            \r\n            return list.push({name: dados.name, coordinate: dados.location})\r\n        })\r\n\r\n        sessionStorage.setItem('location_countries', JSON.stringify(list)) // armazena na sessão o array para usar na página de detalhes do país.\r\n\r\n        return (\r\n            <>\r\n                <div className=\"col-xs-12\">\r\n                    <div role='form' className='search-form form-group'>\r\n                        <input data-testid=\"form_search\" className=\"form-control input-form\" type=\"text\" placeholder=\"Buscar País\" value={this.state.searchTerm} onKeyUp={this.keyHandler} onChange={e => this.searchUpdated(e.target.value)} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"Cards\">\r\n\r\n                    { \r\n                        this.props.load === true ? \r\n                            <div className=\"loading\">\r\n                                <i className=\"fa fa-refresh fa-spin fa-3x fa-fw\"></i> Carregando países...                                \r\n                            </div>\r\n                        : \"\" \r\n                    }\r\n\r\n                    {filteredCountries.map(dado => {\r\n                        return (\r\n                            <React.Fragment key={dado._id}>\r\n                                <Card\r\n                                    key={dado._id}\r\n                                    src={dado.flag.country.flag.svgFile}\r\n                                    name={dado.name}\r\n                                    capital={dado.capital}\r\n                                    area={dado.area}\r\n                                    populacao={dado.flag.country.population}\r\n                                    dominio={dado.flag.country.topLevelDomains || []}\r\n                                    latitude={dado.location.latitude}\r\n                                    longitude={dado.location.longitude}\r\n                                    bordersCountry={dado.borders}\r\n                                    distanceCountries={dado.distanceToOtherCountries}\r\n                                    url={process.env.PUBLIC_URL + \"/details/\" + replaceCharacters(dado.name.replaceAll(\" \", \"-\").replaceAll(/[&\\\\#,+()$~%.'\":*?<>{}]/g, \"\"))}>\r\n                                </Card>\r\n                            </React.Fragment>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({ load: state.country.load, query: state.country.query })\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ searchAll }, dispatch)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchForm)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport '../../css/Details.css'\r\nimport { search } from '../../store/actions/countryActions'\r\nimport { bindActionCreators } from 'redux'\r\n\r\nimport { MapContainer, Marker, Popup, TileLayer, Polyline, Tooltip } from 'react-leaflet'\r\nclass Details extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formEditCountry = this.formEditCountry.bind(this)\r\n        this.alterarDados = this.alterarDados.bind(this)\r\n        this.handleInputChange = this.handleInputChange.bind(this)\r\n\r\n        this.state = {\r\n            name: \"\",\r\n            capital: \"\",\r\n            area: \"\",\r\n            populacao: \"\",\r\n            dominio: [{name: \"\"}],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.search(sessionStorage.getItem('nome_pais'))\r\n        console.log('Inicializando detalhes...')\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target\r\n        const value = target.type === 'text' ? target.value : target.checked\r\n        const name = target.name\r\n\r\n        this.setState({\r\n            [name]: name === 'dominio' ? [{name:value}] : value,\r\n        })\r\n    }\r\n\r\n    alterarDados(nameCountry) {        \r\n        if((this.state.capital && this.state.populacao && this.state.area && this.state.dominio) === \"\") {\r\n            alert('Preencha todos os campos')\r\n        } else {\r\n            sessionStorage.setItem('dados_country_name_alterado_' + nameCountry, JSON.stringify(this.state))\r\n            alert(\"alterações feitas!\")\r\n        }\r\n    }\r\n\r\n    formEditCountry() {\r\n        const nomePais = sessionStorage.getItem('nome_pais')\r\n        let list = sessionStorage.getItem('dados_country_name_alterado_' + nomePais) === null ? sessionStorage.getItem('dados_country_name_' + nomePais) : sessionStorage.getItem('dados_country_name_alterado_' + nomePais)\r\n        list = JSON.parse(list)\r\n\r\n            return (\r\n                <div id=\"details\">\r\n                    <div className=\"detail-country\">                        \r\n                        <img src={JSON.parse(sessionStorage.getItem('dados_country_name_' + sessionStorage.getItem('nome_pais'))).src} alt={list.name} />\r\n                        <div className=\"description\">\r\n                            <h2>{list.name}</h2>\r\n                            <p><strong>Capital:</strong> {this.state.capital === \"\" ? list.capital : this.state.capital}</p>\r\n                            <p><strong>População:</strong> {this.state.populacao === \"\" ? list.populacao : this.state.populacao}</p>\r\n                            <p><strong>Área:</strong> {this.state.area === \"\" ? list.area : this.state.area}</p>\r\n                            <p><strong>Domínio de primeiro nível com código de país:</strong> {this.state.dominio[0].name === \"\" ? list.dominio[0].name : this.state.dominio[0].name }</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"alterar-form\">\r\n                        <div className=\"form-group\">\r\n                            <div className=\"info\"><i className=\"fa fa-info-circle\" aria-hidden=\"true\"></i> Alterar informações do país (campos obrigatórios*)</div>\r\n                            <div className=\"inputs\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Capital*\" name=\"capital\" value={this.state.capital} onChange={this.handleInputChange} />\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"População*\" name=\"populacao\" value={this.state.populacao} onChange={this.handleInputChange} />\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Área*\" name=\"area\" value={this.state.area} onChange={this.handleInputChange} />\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Domínio de primeiro nível*\" name=\"dominio\" value={this.state.dominio[0].name} onChange={this.handleInputChange} />\r\n                            </div>\r\n                            <button className=\"btn btn-primary btn-alterar\" onClick={() => this.alterarDados(nomePais)}>Alterar dados</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        if (sessionStorage.getItem('nome_pais') !== null) { // Evita a tela de erro quando a sessionStorage está vazio.\r\n            \r\n            const nomePais = sessionStorage.getItem('nome_pais')\r\n            let list = sessionStorage.getItem('dados_country_name_' + nomePais)\r\n            list = JSON.parse(list)\r\n\r\n            const listCountriesCoordinates = JSON.parse(sessionStorage.getItem('location_countries')) || []\r\n            \r\n            // let line = []           \r\n            const filterCountriesCoordinates = list.distanceCountries.map(name=> {\r\n                return listCountriesCoordinates.filter(local => {\r\n                return local.name === name.countryName\r\n                // if(name.countryName === local.name) {\r\n                //     const originCountry = [list.latitude, list.longitude]\r\n                    \r\n                //     return (line.push([ local.coordinate.latitude, local.coordinate.longitude ]), line.push(originCountry))\r\n                        \r\n                // }\r\n\r\n                })\r\n            })\r\n\r\n            // console.log(filterCountriesCoordinates)\r\n\r\n            return (\r\n                <>\r\n                    {this.formEditCountry()}\r\n\r\n                    <h2 className=\"title-map\">Localização próxima de 5 países - {nomePais}</h2>\r\n\r\n                    <MapContainer center={[list.latitude, list.longitude]} zoom={5} scrollWheelZoom={false}>\r\n                        <TileLayer\r\n                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n\r\n                        <Marker position={[list.latitude, list.longitude]}>\r\n                            <Popup>\r\n                                <h5><img src={list.src} width=\"50\" alt={nomePais} /> {nomePais}</h5>\r\n                            </Popup>\r\n                        </Marker>\r\n\r\n                        {                            \r\n                            filterCountriesCoordinates.map((local, index) => {\r\n                                \r\n                                // console.log(list.distanceCountries[index].countryName)\r\n\r\n                                const originCountry = [list.latitude, list.longitude] // coordenada do país selecionado                                      \r\n                                let line = []\r\n                                line.push([ local[0].coordinate.latitude, local[0].coordinate.longitude ]) // add na matriz as coordenadas dos 5 países próximos\r\n                                line.push(originCountry)\r\n                                \r\n                                // EXEMPLO:\r\n                                // line = [\r\n                                //     [list.latitude, list.longitude],\r\n                                //     [32,53],\r\n                                //     [list.latitude, list.longitude],\r\n                                //     [40, 60]\r\n                                // ]\r\n\r\n                                return (\r\n                                    <div key={index}>\r\n\r\n                                        <Marker\r\n                                            key={local[0].name}\r\n                                            position={[local[0].coordinate.latitude, local[0].coordinate.longitude]}\r\n                                        >\r\n                                            <Popup>\r\n                                                <h6>{local[0].name}</h6>\r\n                                                <div style={{ fontSize: \"14px\", fontWeight: \"600\" }}>{ list.distanceCountries[index].countryName === local[0].name ? Math.round(list.distanceCountries[index].distanceInKm) + \" Km até \" + nomePais : \"\" }</div>\r\n                                            </Popup>\r\n                                        </Marker>\r\n\r\n                                        <Polyline pathOptions={{ color: 'red' }} positions={line}>\r\n                                            <Tooltip sticky>Distância até {nomePais}</Tooltip>\r\n                                        </Polyline>\r\n\r\n                                        {/* <SVGOverlay attributes={{ color: 'black' }} bounds={line}>\r\n                                            <text x=\"40%\" y=\"50%\" style={{ fontSize: \"16px\", fontWeight: \"600\" }}>\r\n                                                { list.distanceCountries[index].countryName === local[0].name ? Math.round(list.distanceCountries[index].distanceInKm) + \"Km\" : \"\" }\r\n                                            </text>\r\n                                        </SVGOverlay> */}\r\n                                    </div>\r\n                                )\r\n                                \r\n                            })\r\n                        }\r\n\r\n                    </MapContainer>\r\n                </>\r\n            )\r\n        } else {\r\n            return window.location.href = process.env.PUBLIC_URL + \"/dashboard\"\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ( // pega o estado atual armazenado no objeto lá no countryReducer.js\r\n    {\r\n        countryName: state.country.countryName,\r\n        querySelected: state.country.querySelected\r\n    }\r\n)\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ search }, dispatch)\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Details)","import React from 'react'\r\nimport '../css/Homepage.css'\r\n\r\nconst Homepage = props => {\r\n    return (\r\n        <div className=\"homepage\">\r\n            <p>Olá, neste site mostraremos algumas informações sobre os <b>países</b> do mundo.</p>\r\n            <p>Acesse o <b>menu</b> ao lado para buscar informações básicas dos países.</p>\r\n            <p>\r\n                <b>Repositório no GitHub para mais informações do código: </b>\r\n                <a rel=\"noreferrer\" href=\"https://github.com/vx-charles/teste-react-countries/\" target=\"_blank\">https://github.com/vx-charles/teste-react-countries/</a>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Homepage","import '../css/Content.css'\nimport React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport PageHeader from './PageHeader'\nimport SearchForm from '../components/SearchForm'\nimport Details from '../views/pages/Details'\nimport Homepage from './Homepage'\n\nconst Content = props => (\n    <main className=\"Content\">\n        <Switch>\n            <Route exact path={process.env.PUBLIC_URL}>\n                <PageHeader title=\"Homepage - Lista de Países do Mundo\" />\n                <Homepage />\n            </Route>\n\n            <Route path={process.env.PUBLIC_URL + \"/dashboard\"}>\n                <PageHeader title=\"Dashboard\" subtitle=\"Lista de países\" />\n                <SearchForm />\n            </Route>\n\n            <Route path={process.env.PUBLIC_URL + \"/details\"}>\n                <PageHeader title=\"Detalhes do País\" />\n                <Details />\n            </Route>\n            \n            <Route path=\"*\">\n                <div><strong style={{ fontSize: \"24px\" }}>ERRO 404</strong></div>\n                <div>Página não encontrada!!!</div>\n            </Route>\n        </Switch>\n    </main>\n)\n\nexport default Content","import React from 'react'\n\n// CSS\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'font-awesome/css/font-awesome.min.css'\n\nimport Menu from './template/Menu'\nimport { BrowserRouter } from 'react-router-dom'\nimport Content from './template/Content'\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Menu />\n                <Content />\n            </BrowserRouter>\n        </div>\n    )\n}\n\nexport default App\n","const INITIAL_STATE = { load: true, countryName: '', textInput: '', query: [], querySelected: [] }\r\n\r\nconst countryReducer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'SEARCHED':\r\n            return { ...state, load: false, query: action.payload }\r\n        case 'ONE_SEARCHED':            \r\n            return { ...state, querySelected: action.payload }\r\n        case 'CLICKED':\r\n            return { ...state, countryName: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default countryReducer","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk' // usado para funções async nas actions quando for fazer o dispatch\r\nimport countryReducer from '../store/reducers/countryReducer'\r\nimport multi from 'redux-multi'\r\n\r\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // usar o plugin Redux DevTools no Google Chrome.\r\n\r\nconst reducers = combineReducers({\r\n    country: countryReducer\r\n})\r\n\r\nconst store = applyMiddleware(thunk, multi)(createStore)(reducers, devTools)\r\n\r\nfunction configureStore() {\r\n    return store\r\n}\r\n\r\nexport default configureStore","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport configureStore from './store/configureStore'\r\n\r\nconst store = configureStore()\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}